#!/bin/sh


# ================================================================================================================= #
# Author:                                                                                                           #
#                                                                                                                   #
#    Irsan Winarto                                                                                                  #
#    www.github.com/IWinarto                                                                                        #
#                                                                                                                   #
# Description:                                                                                                      #
#                                                                                                                   #
#    This POSIX-compliant Shell script sends HTTP GET requests to ANU's QRNG to get random non-negative integers    #
# printed out as numbers in some user-specified base. ANU is The Australian National University, and QRNG stands    #
# for Quantum Random Number Generator.                                                                              #
#                                                                                                                   #
# Usage:                                                                                                            #
#                                                                                                                   #
#  qrng [-h | -b <base>] [minimum possible number] <maximum possible number> <amount of random numbers to request>  #
#                                                                                                                   #
#       * The -h option prints out this usage.                                                                      #
#                                                                                                                   #
#       * If the -b option is given, the random numbers printed out will be in the given base. The specified base   #
#         must be an integer at least equal to 2 and at most 16. If this option is not specified, the default base  #
#         is 10.                                                                                                    #
#                                                                                                                   #
#       * [minimum possible number] is the minimum possible value of any random number requested. It must at least  #
#         be equal to 0. If this is not specified, 0 is assumed.                                                    #
#                                                                                                                   #
#       * <maximum possible number> argument is the maximum possible value of any random number requested. It must  #
#         not exceed QRNG's limit 16**2048 - 1 (16 raised to the power of 2048, and subtracted by 1), and must at   #
#         least be 1.                                                                                               #
#                                                                                                                   #
#       * The final argument is the amount of random numbers to be requested (at least 0). If this argument is 0,   #
#         then this script will not make requests at all, and the exit status is set to 0.                          #
#                                                                                                                   #
#       * The minimum possible number, maximum possible number, and amount of random numbers to request can be      #
#         given as hexadecimal numbers and/or decimal numbers. A hexadecimal argument must be prefixed by the       #
#         characters 0x (in that order) with the hexadecimal number following the character x immediately.          #
#         Otherwise, the argument is expected to be a decimal integer.                                              #
#                                                                                                                   #
# Output:                                                                                                           #
#                                                                                                                   #
#    All random numbers received (as either non-negative integers or hexadecimal numbers if -h is specified) are    #
# printed to the standard output, with each number on a separate line, and hexadecimal numbers are printed without  #
# any prefix.                                                                                                       #
#    However, if the latest request to ANU's QRNG fails, then all previously received random numbers (if there are  #
# any) will have been printed out, but this script will also end with the leftover amount of random numbers not     #
# requested anymore. In this case, an error message will be printed to the standard error containing the remaining  #
# amount of random numbers failed to be requested, as the last characters printed and preceded by a space, and the  #
# exit status will be set to 2.                                                                                     #
#                                                                                                                   #
# Exit Status:                                                                                                      #
#                                                                                                                   #
#    0 - success                                                                                                    #
#    1 - invalid command-line arguments                                                                             #
#    2 - latest request to ANU's QRNG failed to return random numbers                                               #
#                                                                                                                   #
# ================================================================================================================= #


# if there is any error do not continue the script
set -e


# POSIX bc does NOT have BC_LINE_LENGTH environment variable; thus, this workaround to remove \ then newline
abc() {
    bc | sed -E ':a;N;$!ba; s/\\\n//g'
}


check_request() {
    # $1 is a JSON string returned by ANU's QRNG
    # $2 is the remaining amount of integers failed to be requested
    local success=$(echo "$1" | sed -E 's/.*"success":([^},":]+).*/\1/')
    if [ $success != true ]; then
        printf "%s\n" \
             "qrng error: the latest request to ANU's QRNG failed to return random numbers" \
             "            remaining amount of integers not received is $2" >&2
        exit 2
    fi
}


initialize_parameters() {
    # This defines the parameters needed for function wrap_numbers. These definitions can instead be placed in that
    # function wrap_numbers, but it would be inefficient to do so, because these parameters are constant, but
    # function wrap_numbers is called in a loop (potentially many, many times). So, this initialization function is 
    # intended to be called outside that loop.
    #
    # The description of these parameters can be found in function wrap_numbers.
    #
    # Note: the only edge case for q is that q can be -1, but it is still correct; therefore, allowed

    n=$(echo "$maximum - $minimum + 1" | abc)
    q=$(echo "($minimum / $n) * $n - 1" | abc)      
    p=$(echo "(($abs_max - $maximum) / $n) * $n + $maximum" | abc)
    r=$(echo "($minimum - 1 - $q) + ($abs_max - $p)" | abc)

    # calculation in bc will be performed in base $ibase because it is the base of random numbers returned by ANU QRNG
    if [ "$obase" -ne 10 ]; then
        minimum=$(echo "obase=$ibase; ibase=10; $minimum" | abc)
        maximum=$(echo "obase=$ibase; ibase=10; $maximum" | abc)
        abs_max=$(echo "obase=$ibase; ibase=10; $abs_max" | abc)
        n=$(echo "obase=$ibase; ibase=10; $n" | abc)
        q=$(echo "obase=$ibase; ibase=10; $q" | abc)
        p=$(echo "obase=$ibase; ibase=10; $p" | abc)
        r=$(echo "obase=$ibase; ibase=10; $r" | abc)
    fi
}


wrap_numbers() {
    # This is a helper function for request_random_numbers. It makes sure that all non-negative integers in $numbers
    # are at least $minimum and at most $maximum.
    #
    # QRNG returns numbers that are either between 0 and 255, or 0 and 65535, or 0 and 16**(block_size * 2) - 1. Thus, 
    # the QRNG JSON API does not provide the capability to specify minimum and maximum numbers. This is the reason why 
    # this function is necessary to provide an API that gives the user the freedom to choose a minimum and a maximum, 
    # and at the same time guarantees that the range [minimum, maximum] is still uniformly random.
    #
    # This function does not provide any guarantee to the result if minimum is not strictly less than maximum, or 
    # minimum and maximum are not non-negative integers.
    #
    # Check the documentation on the GitHub repo to understand how this wrapping retains uniform randomness.
    #
    # The following describes the core of the algorithm:
    #
    #       Require: 0 <= minimum < maximum <= abs_max
    #
    #       The aim of the algo is to bijectively map every NON-overlapping sub-range of [0, abs_max] that is not
    #       [minimum, maximum] but has the same length as the sub-range [minimum, maximum] to that same sub-range 
    #       [minimum, maximum]. This is how uniform randomness is retained for the sub-range [minimum, maximum], 
    #       while keeping most of the random numbers outside the sub-range, provided that [0, abs_max] is also 
    #       uniformly random.
    #
    #       n is the length of the inclusive range [minimum, maximum].
    #
    #       q is the upper limit of the inclusive range [0, q], such that the length of the range (q + 1) is the 
    #       biggest multiple of n that is at most minimum - 1.
    #       
    #       p is the upper limit of the inclusive range [maximum + 1, p], such that the length of the range is a
    #       multiple of n, and p is at most abs_max.
    #
    #       r is the count of the remaining possible numbers in the ranges [q + 1, minimum - 1] and [p + 1, abs_max]
    #       combined if and only if (q + 1 < minimum - 1) and (p + 1 < abs_max). Therefore, r is expected to be 
    #       0 <= r <= 2*(n-1). 
    #
    #       x is a random number to be mapped into [minimum, maximum], and is expected to be 0 <= x <= abx_max
    #
    #       let k and d be integers s.t. k >= 0 and 0 <= d < n:
    #           if minimum <= x <= maximum, then x maps to itself
    #           if x <= q and x = k*n + d, then x maps to minimum + d
    #           if maximum < x <= p and x - maximum - 1 = k*n + d, then x maps to minimum + d 
    #           if r >= n
    #               if q < x < minimum and x - q - 1 = k*n + d, then x maps to minimum + d
    #               if p < x <= p + n - (minimum - 1 - q) and x - q - 1 - (p - minimum + 1) = k*n + d, 
    #                   then x maps to minimum + d
    #
    #               The last two if conditions imply the last possible sub-range with length n to map is the union of
    #               [q + 1, minimum - 1] and [p + 1, p + n - (minimum - 1 - q)]
    #
    #       Any random number x that doesn't satisfy the above is dropped/ignored. This implies if r == 0 or r == n, no
    #       random numbers are dropped; if 0 < r < n, r random numbers are dropped; and if r >=n, at most 2*(n-1) - n = 
    #       n - 2 random numbers are dropped.

    # this is the number of times function w() in the bc program is called; it needs to be converted into the input base
    if [ "$ibase" -ne 10 ]; then
        number_of_numbers=$(echo "$numbers" | wc -l)
        number_of_numbers=$(echo "obase=$ibase; ibase=10; $number_of_numbers" | abc)
    fi

    # map the numbers such that uniform randomness is conserved
    numbers=$( \
        echo "
            obase=$obase
            ibase=$ibase

            define w(x) {
                if (x >= $minimum)
                    if (x <= $maximum)
                        return x

                if (x <= $q)
                    return ((x % $n) + $minimum)

                if (x > $maximum)
                    if (x <= $p)
                        return (((x - $maximum - 1) % $n) + $minimum)

                if (r >= $n) {
                    if (x > $q)
                        if (x < $minimum)
                            return (((x - $q - 1) % $n) + $minimum)

                    if (x > $p)
                        if (x <= $p + $n - ($minimum - 1 - $q))
                            return (((x - $q - 1 - ($p - $minimum + 1)) % $n) + $minimum)
                }

                /* ask the caller to drop the number */
                return -1
            }
            
            /* instantiate array a[]; numbers are expected to be on a separate line each */
            $(echo "$numbers" | awk '{printf "a[%d]=%s\n", NR - 1, $1}')

            for (i = 0; i < $number_of_numbers; ++i) {
                y = w(a[i])
                if (y >= 0) y
            }
        " | abc \
    )
}


request_random_numbers() {
    # This requests at most max(ISO C signed long)-many random numbers between $minimum and $mod - 1 inclusive.

    local obase=$1                                      # output base of bc command
    local amount=$2                                     # number of random integers to request <= 2**31 - 1
    local minimum=${3:-0}                               # minimum possible value of any random integer (default 0)
    local maximum=$4                                    # maximum possible value of any random integer
    local data_type=$5                                  # QRNG data type is either uint8, uint16, or hex16
    local abs_max=$6                                    # the absolute maximum of the data type
    local block_size_request=${7:+&size=$7}             # if given, then equal to &size=$7 (must not exceed 1024)

    # input base of bc command
    [ "$data_type" = hex16 ] && local ibase=16 || local ibase=10

    # define the parameters needed for function wrap_numbers; do this outside the loop for efficiency
    initialize_parameters

    until is_zero $amount; do

        # ANU's QRNG can only return a maximum of 1024 random numbers per request
        local length=$(( $amount >= 1024 ? 1024 : $amount ))

        # request a JSON containing length-many random numbers
        local url="https://qrng.anu.edu.au/API/jsonI.php?length=${length}&type=${data_type}${block_size_request}"
        local json=$(curl -sS -X GET "$url")

        # if the latest request failed, this will exit with status 2
        check_request "$json" "$amount"

        # extract the numbers in the data array from the JSON; each random number is on a separate line
        local numbers=$(echo "$json" | sed -E 's/[^[]*\[//; s/\].*//; s/"//g; s/,/\n/g')

        # make sure hexadecimal letter-digits are in upper-case letters for bc to process
        [ "$data_type" = hex16 ] && numbers=$(echo "$numbers" | tr a-f A-F)

        # make sure that numbers are between $minimum and $maximum inclusive; this updates numbers variable
        wrap_numbers

        # print numbers and update number of random intergers remaining to request
        if [ ${#numbers} -ne 0 ]; then
            echo "$numbers"
            local actual_length=$(echo "$numbers" | wc -l)
            amount=$(( $amount - $actual_length ))
        fi

    done
}


calc_block_size() {
    local hex=$(echo "ibase=A; obase=16; $1" | abc)
    number_of_hex_digits=${#hex}

    # The number of "blocks". (A block is a pair of hex digits.)
    echo $(( ($number_of_hex_digits + 1) / 2 ))
}


is_not_non_negative() {
    expr "$1" : '^0$\|[1-9][0-9]*$' >/dev/null && return 1 || return 0
}


is_zero() {
    expr "$1" : '^0$' >/dev/null && return 0 || return 1
}


hex_to_int() {
    # if $1 is a hexadecimal number denoted by the prefix 0x, then convert it into decimal; otherwise, echo it
    if expr "$1" : '^0x' >/dev/null; then
        local number=$(echo ${1#0x} | tr 'a-f' 'A-F')
        echo "obase=10; ibase=16; $number" | abc
    else
        echo "$1"
    fi
}


err_usage() {
    echo "qrng error: $*" >&2
    exit 1
}


print_usage() {
    echo 'Usage: qrng [-b <base in the range [2, 16]> | -h] [min possible number]' \
         '<max possible number at most 16**2048 - 1> <number of random integers to request>' >&2
}


extract_arguments() {
    # default base of random numbers is 10
    base=10

    while getopts ':hb:' opt "$@"; do
        case $opt in
            b)
                if  is_not_non_negative "$OPTARG" || [ "$OPTARG" -lt 2 ] || [ "$OPTARG" -gt 16 ]; then
                    err_usage "the base must be a positive integer at least equal to 2 and at most 16" 
                else
                    base=$OPTARG
                    shift 2
                    OPTIND=$(( $OPTIND - 2 ))
                fi
                ;;

            h)
                print_usage
                exit 0
                ;;

            *)
                err_usage "-$OPTARG is not a valid option"
                ;;
        esac
    done

    # NOTE: arguments MUST have been shifted above
    for arg in "$@"; do
        [ -z "$arg" ] && err_usage "one of the non-optional arguments is empty" 
    done

    if [ $# -eq 2 ]; then
        max_integer=$(hex_to_int $1)
        amount=$(hex_to_int $2)
    elif [ $# -eq 3 ]; then
        min_integer=$(hex_to_int $1)
        max_integer=$(hex_to_int $2)
        amount=$(hex_to_int $3)
    elif [ $# -eq 0 ]; then
        print_usage
        exit 1
    else
        print_usage 
        exit 1
    fi

    # using 'abc' in all the tests below is necessary because this script accepts arbritrarily large arguments
    if [ ! -z "$min_integer" ] && is_not_non_negative "$min_integer"; then
        err_usage "minimum possible value of random numbers must be at least 0"
    fi

    if is_not_non_negative "$max_integer" || [ $(echo "$max_integer < 1" | abc) -eq 1 ]; then
        err_usage "maximum possible value of random numbers must be at least 1"
    fi

    if [ ! -z "$min_integer" ] && [ $(echo "$min_integer >= $max_integer" | abc) -eq 1 ]; then
        err_usage "the minimum possible value must be strictly less than the maximum"
    fi

    if is_not_non_negative "$amount"; then
        err_usage "the amount of random numbers requested must be at least 0"
    fi

    # do nothing if requested 0 amount 
    is_zero "$amount" && exit 0

    # set arguments for QRNG@ANU JSON API and wrapping; note that $max_integer can be bigger than POSIX precision
    if [ ${#max_integer} -le 3 ] && [ "$max_integer" -le 255 ]; then
        data_type='uint8'
        abs_max=255
    elif [ ${#max_integer} -le 5 ] && [ "$max_integer" -le 65535 ]; then
        data_type='uint16'
        abs_max=65535
    else
        data_type='hex16'
        block_size=$(calc_block_size "$max_integer")

        # check if maximum number of hex digit pairs is exceeded
        if [ "$block_size" -gt 1024 ]; then
            err_usage 'maximum possible random number must not exceed 16**2048 - 1' 
        fi

        abs_max=$(echo "16^($block_size*2) - 1"| abc)
    fi
}


# get arguments either from stdin if it's NOT connected to a tty, or from the command-line arguments
if [ ! -t 0 ]; then
    # read -r first second third
    # extract_arguments first second third
    read -r arguments
    extract_arguments $arguments
else
    extract_arguments "$@"
fi


# Shell's maximum integer value is at least 2**31 - 1 (as defined by POSIX.1-2017 to be max value of ISO C signed long)
POSIX_PRECISION=2147483647


# Use 'bc' for arbritrary precision calculation to request ANY amount (even exceeding Shell variable limit)
until is_zero "$amount"; do
    chunk_size=$( \
        # POSIX bc does NOT support 'else' (eye-rolled)
        echo " 
            if ($amount >= $POSIX_PRECISION) $POSIX_PRECISION
            if ($amount < $POSIX_PRECISION) $amount
        " | abc \
    )

    request_random_numbers "$base" "$chunk_size" "$min_integer" "$max_integer" "$data_type" "$abs_max" "$block_size"

    amount=$(echo "$amount - $chunk_size" | abc)
done 


# successful
exit 0
